openapi: 3.0.3
info:
  title: GES Restaurant Stock Management API
  version: 1.0.0
  description: API for managing restaurant stock, purchases, usage, expenses, suppliers, and reports.
servers:
  - url: http://localhost:8080/api
    description: Local
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        timestamp: { type: string, format: date-time }
        status: { type: integer }
        error: { type: string }
        message: { type: string }
        path: { type: string }
      required: [timestamp, status, error, message]
    PageMeta:
      type: object
      properties:
        page: { type: integer }
        size: { type: integer }
        total: { type: integer }
      required: [page, size, total]
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        role: { type: string, enum: [ADMIN, MANAGER, STAFF] }
      required: [id, name, email, role]
    AuthRequest:
      type: object
      properties:
        email: { type: string, format: email }
        password: { type: string }
      required: [email, password]
    AuthResponse:
      type: object
      properties:
        token: { type: string }
        user: { $ref: '#/components/schemas/User' }
      required: [token, user]
    Category:
      type: string
      enum: [DRINKS, FOOD, INGREDIENTS, SUPPLIES]
    StockItem:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        category: { $ref: '#/components/schemas/Category' }
        quantity: { type: number, format: double }
        unit: { type: string, example: kg }
        unitPrice: { type: number, format: double }
        totalCost: { type: number, format: double }
        reorderLevel: { type: number, format: double }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [id, name, category, quantity, unit, unitPrice]
    StockItemCreate:
      type: object
      properties:
        name: { type: string }
        category: { $ref: '#/components/schemas/Category' }
        quantity: { type: number, format: double }
        unit: { type: string }
        unitPrice: { type: number, format: double }
        reorderLevel: { type: number, format: double }
      required: [name, category, quantity, unit, unitPrice]
    Supplier:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        phone: { type: string }
        email: { type: string, format: email }
        address: { type: string }
      required: [id, name]
    SupplierCreate:
      type: object
      properties:
        name: { type: string }
        phone: { type: string }
        email: { type: string, format: email }
        address: { type: string }
      required: [name]
    Purchase:
      type: object
      properties:
        id: { type: string, format: uuid }
        supplierId: { type: string, format: uuid }
        date: { type: string, format: date }
        totalCost: { type: number, format: double }
        items:
          type: array
          items: { $ref: '#/components/schemas/PurchaseItem' }
      required: [id, supplierId, date, totalCost]
    PurchaseItem:
      type: object
      properties:
        stockItemId: { type: string, format: uuid }
        quantity: { type: number, format: double }
        price: { type: number, format: double }
      required: [stockItemId, quantity, price]
    PurchaseCreate:
      type: object
      properties:
        supplierId: { type: string, format: uuid }
        date: { type: string, format: date }
        items:
          type: array
          items:
            type: object
            properties:
              stockItemId: { type: string, format: uuid }
              quantity: { type: number, format: double }
              price: { type: number, format: double }
            required: [stockItemId, quantity, price]
      required: [supplierId, date, items]
    Usage:
      type: object
      properties:
        id: { type: string, format: uuid }
        stockItemId: { type: string, format: uuid }
        quantityUsed: { type: number, format: double }
        date: { type: string, format: date }
        purpose: { type: string }
        createdBy: { type: string }
      required: [id, stockItemId, quantityUsed, date]
    UsageCreate:
      type: object
      properties:
        stockItemId: { type: string, format: uuid }
        quantityUsed: { type: number, format: double }
        date: { type: string, format: date }
        purpose: { type: string }
      required: [stockItemId, quantityUsed, date]
    Expense:
      type: object
      properties:
        id: { type: string, format: uuid }
        category: { type: string }
        description: { type: string }
        amount: { type: number, format: double }
        date: { type: string, format: date }
      required: [id, category, amount, date]
    ExpenseCreate:
      type: object
      properties:
        category: { type: string }
        description: { type: string }
        amount: { type: number, format: double }
        date: { type: string, format: date }
      required: [category, amount, date]
    PageStockItems:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/StockItem' } }
        meta: { $ref: '#/components/schemas/PageMeta' }
      required: [data, meta]
    PageSuppliers:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/Supplier' } }
        meta: { $ref: '#/components/schemas/PageMeta' }
      required: [data, meta]
    PagePurchases:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/Purchase' } }
        meta: { $ref: '#/components/schemas/PageMeta' }
      required: [data, meta]
    PageUsages:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/Usage' } }
        meta: { $ref: '#/components/schemas/PageMeta' }
      required: [data, meta]
    PageExpenses:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/Expense' } }
        meta: { $ref: '#/components/schemas/PageMeta' }
      required: [data, meta]
    MonthlyReport:
      type: object
      properties:
        month: { type: string, example: 2025-10 }
        totalStockValue: { type: number, format: double }
        purchases: { type: number, format: double }
        expenses: { type: number, format: double }
        estimatedSalesValue: { type: number, format: double }
        profit: { type: number, format: double }
      required: [month, purchases, expenses, profit]
security:
  - bearerAuth: []
paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRequest' }
      responses:
        '200':
          description: Authenticated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401': { description: Unauthorized }
  /auth/register:
    post:
      tags: [Auth]
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string }
                role: { type: string, enum: [ADMIN, MANAGER, STAFF] }
              required: [name, email, password]
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/User' } } } }
  /stocks:
    get:
      tags: [Stocks]
      summary: List stock items
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
        - in: query
          name: q
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PageStockItems' } } } }
    post:
      tags: [Stocks]
      summary: Create stock item
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockItemCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/StockItem' } } } }
  /stocks/{id}:
    get:
      tags: [Stocks]
      summary: Get stock item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/StockItem' } } } }
        '404': { description: Not Found }
    put:
      tags: [Stocks]
      summary: Update stock item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/StockItemCreate' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/StockItem' } } } }
    delete:
      tags: [Stocks]
      summary: Delete stock item
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
  /suppliers:
    get:
      tags: [Suppliers]
      summary: List suppliers
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PageSuppliers' } } } }
    post:
      tags: [Suppliers]
      summary: Create supplier
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Supplier' } } } }
  /suppliers/{id}:
    get:
      tags: [Suppliers]
      summary: Get supplier
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Supplier' } } } }
        '404': { description: Not Found }
    put:
      tags: [Suppliers]
      summary: Update supplier
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplierCreate' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Supplier' } } } }
    delete:
      tags: [Suppliers]
      summary: Delete supplier
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
  /purchases:
    get:
      tags: [Purchases]
      summary: List purchases
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PagePurchases' } } } }
    post:
      tags: [Purchases]
      summary: Create purchase (updates stock quantities)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PurchaseCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Purchase' } } } }
  /purchases/{id}:
    get:
      tags: [Purchases]
      summary: Get purchase
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Purchase' } } } }
        '404': { description: Not Found }
    delete:
      tags: [Purchases]
      summary: Delete purchase
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204': { description: No Content }
  /usages:
    get:
      tags: [Usage]
      summary: List usage entries
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PageUsages' } } } }
    post:
      tags: [Usage]
      summary: Record stock usage (decreases stock)
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UsageCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Usage' } } } }
  /expenses:
    get:
      tags: [Expenses]
      summary: List expenses
      parameters:
        - in: query
          name: page
          schema: { type: integer, default: 1 }
        - in: query
          name: size
          schema: { type: integer, default: 20 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/PageExpenses' } } } }
    post:
      tags: [Expenses]
      summary: Create expense
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ExpenseCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Expense' } } } }
  /reports/monthly:
    get:
      tags: [Reports]
      summary: Get monthly summary
      parameters:
        - in: query
          name: month
          schema: { type: string, example: 2025-10 }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/MonthlyReport' } } } }
